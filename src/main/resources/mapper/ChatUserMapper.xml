<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.gantleman.shopd.dao.ChatUserMapper">
  <resultMap id="BaseResultMap" type="com.github.gantleman.shopd.entity.ChatUser">
    <id column="userID" jdbcType="INTEGER" property="userid" />
    <result column="chat_size" jdbcType="INTEGER" property="chatSize" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.github.gantleman.shopd.entity.ChatUser">
    <result column="chat_list" jdbcType="LONGVARCHAR" property="chatList" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    userID, chat_size
  </sql>
  <sql id="Blob_Column_List">
    chat_list
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.github.gantleman.shopd.entity.ChatUserExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from chat_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.github.gantleman.shopd.entity.ChatUserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from chat_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from chat_user
    where userID = #{userid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from chat_user
    where userID = #{userid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.github.gantleman.shopd.entity.ChatUserExample">
    delete from chat_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.github.gantleman.shopd.entity.ChatUser">
    insert into chat_user (userID, chat_size, chat_list
      )
    values (#{userid,jdbcType=INTEGER}, #{chatSize,jdbcType=INTEGER}, #{chatList,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.github.gantleman.shopd.entity.ChatUser">
    insert into chat_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userid != null">
        userID,
      </if>
      <if test="chatSize != null">
        chat_size,
      </if>
      <if test="chatList != null">
        chat_list,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userid != null">
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="chatSize != null">
        #{chatSize,jdbcType=INTEGER},
      </if>
      <if test="chatList != null">
        #{chatList,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.github.gantleman.shopd.entity.ChatUserExample" resultType="java.lang.Long">
    select count(*) from chat_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update chat_user
    <set>
      <if test="record.userid != null">
        userID = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.chatSize != null">
        chat_size = #{record.chatSize,jdbcType=INTEGER},
      </if>
      <if test="record.chatList != null">
        chat_list = #{record.chatList,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update chat_user
    set userID = #{record.userid,jdbcType=INTEGER},
      chat_size = #{record.chatSize,jdbcType=INTEGER},
      chat_list = #{record.chatList,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update chat_user
    set userID = #{record.userid,jdbcType=INTEGER},
      chat_size = #{record.chatSize,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.github.gantleman.shopd.entity.ChatUser">
    update chat_user
    <set>
      <if test="chatSize != null">
        chat_size = #{chatSize,jdbcType=INTEGER},
      </if>
      <if test="chatList != null">
        chat_list = #{chatList,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where userID = #{userid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.github.gantleman.shopd.entity.ChatUser">
    update chat_user
    set chat_size = #{chatSize,jdbcType=INTEGER},
      chat_list = #{chatList,jdbcType=LONGVARCHAR}
    where userID = #{userid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.github.gantleman.shopd.entity.ChatUser">
    update chat_user
    set chat_size = #{chatSize,jdbcType=INTEGER}
    where userID = #{userid,jdbcType=INTEGER}
  </update>
</mapper>